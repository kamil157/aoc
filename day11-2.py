from collections import defaultdict

input_raw = """3,8,1005,8,299,1106,0,11,0,0,0,104,1,104,0,3,8,102,-1,8,10,101,1,10,10,4,10,1008,8,0,10,4,10,1002,8,1,29,1,1007,14,10,2,1106,8,10,3,8,1002,8,-1,10,1001,10,1,10,4,10,108,1,8,10,4,10,1002,8,1,58,3,8,1002,8,-1,10,101,1,10,10,4,10,108,0,8,10,4,10,1002,8,1,80,3,8,1002,8,-1,10,1001,10,1,10,4,10,1008,8,0,10,4,10,102,1,8,103,1,5,6,10,3,8,102,-1,8,10,101,1,10,10,4,10,108,1,8,10,4,10,101,0,8,128,1,106,18,10,1,7,20,10,1006,0,72,1006,0,31,3,8,1002,8,-1,10,1001,10,1,10,4,10,108,0,8,10,4,10,1002,8,1,164,3,8,1002,8,-1,10,1001,10,1,10,4,10,108,1,8,10,4,10,102,1,8,186,1,1007,8,10,1006,0,98,3,8,1002,8,-1,10,1001,10,1,10,4,10,1008,8,0,10,4,10,101,0,8,216,2,102,8,10,1,1008,18,10,1,1108,8,10,1006,0,68,3,8,1002,8,-1,10,1001,10,1,10,4,10,1008,8,1,10,4,10,1001,8,0,253,3,8,102,-1,8,10,1001,10,1,10,4,10,108,1,8,10,4,10,1002,8,1,274,1,1105,7,10,101,1,9,9,1007,9,1060,10,1005,10,15,99,109,621,104,0,104,1,21102,936995738520,1,1,21102,316,1,0,1106,0,420,21101,0,936995824276,1,21102,1,327,0,1106,0,420,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,21102,248129784923,1,1,21102,1,374,0,1105,1,420,21102,29015149735,1,1,21101,385,0,0,1106,0,420,3,10,104,0,104,0,3,10,104,0,104,0,21101,983925826304,0,1,21101,0,408,0,1105,1,420,21102,825012036364,1,1,21101,0,419,0,1105,1,420,99,109,2,22101,0,-1,1,21101,0,40,2,21101,0,451,3,21102,441,1,0,1105,1,484,109,-2,2105,1,0,0,1,0,0,1,109,2,3,10,204,-1,1001,446,447,462,4,0,1001,446,1,446,108,4,446,10,1006,10,478,1101,0,0,446,109,-2,2105,1,0,0,109,4,2102,1,-1,483,1207,-3,0,10,1006,10,501,21102,0,1,-3,21201,-3,0,1,22102,1,-2,2,21102,1,1,3,21101,520,0,0,1106,0,525,109,-4,2105,1,0,109,5,1207,-3,1,10,1006,10,548,2207,-4,-2,10,1006,10,548,21201,-4,0,-4,1105,1,616,21201,-4,0,1,21201,-3,-1,2,21202,-2,2,3,21102,1,567,0,1105,1,525,21202,1,1,-4,21102,1,1,-1,2207,-4,-2,10,1006,10,586,21102,0,1,-1,22202,-2,-1,-2,2107,0,-3,10,1006,10,608,21201,-1,0,1,21102,1,608,0,106,0,483,21202,-2,-1,-2,22201,-4,-2,-4,109,-5,2106,0,0"""


def split_opcode(full_opcode):
    digits = [int(n) for n in str(full_opcode).zfill(5)]
    modes = digits[:3]
    opcode = 10 * digits[3] + digits[4]
    return modes, opcode


def get(l, n, mode, base):
    if mode == 0:
        return l[l[n]]
    elif mode == 1:
        return l[n]
    elif mode == 2:
        return l[base + l[n]]
    else:
        assert False


def get_address(l, n, mode, base):
    if mode == 0:
        return l[n]
    elif mode == 1:
        return n
    elif mode == 2:
        return base + l[n]
    else:
        assert False


def intcode(l, program_counters, user_input):
    pc = program_counters[0]
    base = program_counters[1]

    while True:
        next_opcode = l[pc]
        # print(next_opcode)
        modes, opcode = split_opcode(next_opcode)

        # print(opcode)

        if opcode == 1:
            a = get(l, pc + 1, modes[2], base)
            b = get(l, pc + 2, modes[1], base)
            assert modes[0] != 1
            address = get_address(l, pc + 3, modes[0], base)
            pc += 4
            l[address] = a + b
        elif opcode == 2:
            a = get(l, pc + 1, modes[2], base)
            b = get(l, pc + 2, modes[1], base)
            assert modes[0] != 1
            address = get_address(l, pc + 3, modes[0], base)
            pc += 4
            l[address] = a * b
        elif opcode == 3:
            address = get_address(l, pc + 1, modes[2], base)
            pc += 2
            l[address] = user_input
        elif opcode == 4:
            output = get(l, pc + 1, modes[2], base)
            pc += 2
            # print('out', output)
            program_counters[0] = pc
            program_counters[1] = base
            return output
        elif opcode == 5:
            a = get(l, pc + 1, modes[2], base)
            b = get(l, pc + 2, modes[1], base)
            if a != 0:
                pc = b
            else:
                pc += 3
        elif opcode == 6:
            a = get(l, pc + 1, modes[2], base)
            b = get(l, pc + 2, modes[1], base)
            if a == 0:
                pc = b
            else:
                pc += 3
        elif opcode == 7:
            a = get(l, pc + 1, modes[2], base)
            b = get(l, pc + 2, modes[1], base)
            address = get_address(l, pc + 3, modes[0], base)
            assert modes[0] != 1
            if a < b:
                l[address] = 1
            else:
                l[address] = 0
            pc += 4
        elif opcode == 8:
            a = get(l, pc + 1, modes[2], base)
            b = get(l, pc + 2, modes[1], base)
            address = get_address(l, pc + 3, modes[0], base)
            assert modes[0] != 1
            if a == b:
                l[address] = 1
            else:
                l[address] = 0
            pc += 4
        elif opcode == 9:
            a = get(l, pc + 1, modes[2], base)
            base += a
            pc += 2
        elif opcode == 99:
            print('halt')
            break
        else:
            print('failed op', opcode)
            assert False

    return 'halt'


def run(s):
    memory = [int(n) for n in s.split(',')]
    for _ in range(100000):
        memory.append(0)
    program_counters = [0, 0]

    black, white = 0, 1
    x, y = 0, 0
    dir = 0
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    panels = defaultdict(int)
    panels[x, y] = white

    # loop
    while True:
        inp = panels[x, y]
        result = intcode(memory, program_counters, inp)
        if result == 'halt':
            break
        color = 'black' if result == black else 'white'
        panels[x, y] = result
        # print(result, color)

        result = intcode(memory, program_counters, inp)
        if result == 'halt':
            break
        turn = 'left' if result == 0 else 'right'
        # print(result, turn)

        # print('status', x, y, dir)
        dir += -1 if result == 0 else 1
        x += directions[dir % 4][0]
        y += directions[dir % 4][1]
        # print(x, y, panels)

    # print(panels)
    # print(len(panels))
    return panels


def print_panels(panels):
    # for (x, y), color in panels.items():
    # print(x, y, color)

    min_x = min(p[0] for p in panels.keys())
    max_x = max(p[0] for p in panels.keys())
    min_y = min(p[1] for p in panels.keys())
    max_y = max(p[1] for p in panels.keys())

    adjusted = {}
    for (x, y), color in panels.items():
        adjusted[(x - min_x, y - min_y)] = color
        # print(x - min_x, y - min_y, color)

    # print(adjusted)
    image = [[0] * (max_x - min_x + 1) for y in range(max_y - min_y + 1)]
    # print(image)
    for (x, y), color in adjusted.items():
        image[y][x] = color

    for row in image[::-1]:
        row_s = ''
        for pixel in row:
            # print(pixel)
            if pixel == 0:
                row_s += '  '
            else:  # elif pixel == 1:
                row_s += '# '
        print(row_s)
    # print(image)


# s = "1102,34463338,34463338,63,1007,63,34463338,63,1005,63,53,1101,3,0,1000,109,988,209,12,9,1000,209,6,209,3,203,0,1008,1000,1,63,1005,63,65,1008,1000,2,63,1005,63,904,1008,1000,0,63,1005,63,58,4,25,104,0,99,4,0,104,0,99,4,17,104,0,99,0,0,1102,1,37,1000,1101,856,0,1029,1101,286,0,1025,1101,39,0,1004,1101,861,0,1028,1101,845,0,1026,1102,28,1,1002,1102,1,0,1020,1101,0,892,1023,1101,0,291,1024,1101,35,0,1018,1101,0,27,1006,1102,1,26,1011,1101,33,0,1019,1102,31,1,1014,1102,1,36,1010,1102,23,1,1007,1101,0,32,1016,1101,29,0,1008,1101,20,0,1001,1102,1,25,1015,1101,38,0,1017,1101,0,24,1012,1102,1,22,1005,1101,1,0,1021,1101,0,21,1003,1102,1,838,1027,1102,1,30,1013,1101,895,0,1022,1101,0,34,1009,109,7,1208,0,22,63,1005,63,201,1001,64,1,64,1105,1,203,4,187,1002,64,2,64,109,-6,2102,1,5,63,1008,63,24,63,1005,63,223,1105,1,229,4,209,1001,64,1,64,1002,64,2,64,109,17,21102,40,1,-6,1008,1012,40,63,1005,63,255,4,235,1001,64,1,64,1106,0,255,1002,64,2,64,109,-15,21108,41,41,9,1005,1012,277,4,261,1001,64,1,64,1106,0,277,1002,64,2,64,109,11,2105,1,10,4,283,1105,1,295,1001,64,1,64,1002,64,2,64,109,-9,21101,42,0,8,1008,1013,44,63,1005,63,315,1105,1,321,4,301,1001,64,1,64,1002,64,2,64,109,13,1206,3,337,1001,64,1,64,1106,0,339,4,327,1002,64,2,64,109,-10,1208,0,29,63,1005,63,361,4,345,1001,64,1,64,1106,0,361,1002,64,2,64,109,2,2108,27,-4,63,1005,63,383,4,367,1001,64,1,64,1105,1,383,1002,64,2,64,109,-4,1207,2,30,63,1005,63,405,4,389,1001,64,1,64,1105,1,405,1002,64,2,64,109,22,1205,-8,417,1106,0,423,4,411,1001,64,1,64,1002,64,2,64,109,-27,2108,19,0,63,1005,63,443,1001,64,1,64,1106,0,445,4,429,1002,64,2,64,109,13,21108,43,45,-1,1005,1013,461,1106,0,467,4,451,1001,64,1,64,1002,64,2,64,109,1,21107,44,45,4,1005,1019,485,4,473,1105,1,489,1001,64,1,64,1002,64,2,64,109,-8,2102,1,-7,63,1008,63,37,63,1005,63,515,4,495,1001,64,1,64,1106,0,515,1002,64,2,64,109,1,2107,38,-4,63,1005,63,533,4,521,1105,1,537,1001,64,1,64,1002,64,2,64,109,4,21107,45,44,1,1005,1013,553,1106,0,559,4,543,1001,64,1,64,1002,64,2,64,109,-7,2107,21,-4,63,1005,63,575,1106,0,581,4,565,1001,64,1,64,1002,64,2,64,109,9,1205,7,599,4,587,1001,64,1,64,1105,1,599,1002,64,2,64,109,-11,2101,0,-3,63,1008,63,40,63,1005,63,619,1105,1,625,4,605,1001,64,1,64,1002,64,2,64,109,1,2101,0,-2,63,1008,63,28,63,1005,63,651,4,631,1001,64,1,64,1106,0,651,1002,64,2,64,109,1,21102,46,1,7,1008,1012,44,63,1005,63,671,1106,0,677,4,657,1001,64,1,64,1002,64,2,64,109,4,1201,-7,0,63,1008,63,28,63,1005,63,699,4,683,1105,1,703,1001,64,1,64,1002,64,2,64,109,-6,1207,-3,36,63,1005,63,719,1105,1,725,4,709,1001,64,1,64,1002,64,2,64,109,-4,1201,6,0,63,1008,63,23,63,1005,63,745,1106,0,751,4,731,1001,64,1,64,1002,64,2,64,109,8,1202,-6,1,63,1008,63,20,63,1005,63,777,4,757,1001,64,1,64,1105,1,777,1002,64,2,64,109,5,1202,-5,1,63,1008,63,25,63,1005,63,801,1001,64,1,64,1105,1,803,4,783,1002,64,2,64,109,8,21101,47,0,-6,1008,1014,47,63,1005,63,829,4,809,1001,64,1,64,1106,0,829,1002,64,2,64,109,1,2106,0,6,1001,64,1,64,1106,0,847,4,835,1002,64,2,64,109,11,2106,0,-4,4,853,1105,1,865,1001,64,1,64,1002,64,2,64,109,-15,1206,3,883,4,871,1001,64,1,64,1106,0,883,1002,64,2,64,109,14,2105,1,-8,1105,1,901,4,889,1001,64,1,64,4,64,99,21102,1,27,1,21102,1,915,0,1106,0,922,21201,1,57564,1,204,1,99,109,3,1207,-2,3,63,1005,63,964,21201,-2,-1,1,21102,1,942,0,1105,1,922,22101,0,1,-1,21201,-2,-3,1,21101,957,0,0,1105,1,922,22201,1,-1,-2,1106,0,968,21202,-2,1,-2,109,-3,2106,0,0"
# memory = [int(n) for n in s.split(',')]
# for _ in range(100000):
#     memory.append(0)
# program_counters = [0]
# print(intcode(memory, program_counters, 1))

# run('109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99', 0)
# run('1102,34915192,34915192,7,4,7,99,0', 0)
# run('104,1125899906842624,99', 0)
# run(input_raw, 1)
print_panels(run(input_raw))